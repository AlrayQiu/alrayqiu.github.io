<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Alray Doc</title><link>https://alrayqiu.github.io/</link><description>Recent content on Alray Doc</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://alrayqiu.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>集成到现有代码中</title><link>https://alrayqiu.github.io/autoaim/buildandrun/%E9%9B%86%E6%88%90%E5%88%B0%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alrayqiu.github.io/autoaim/buildandrun/%E9%9B%86%E6%88%90%E5%88%B0%E9%A1%B9%E7%9B%AE/</guid><description>&lt;h1 id="施工中"&gt;施工中&lt;/h1&gt;
&lt;h2 id="学习下-cmake-如何依赖自己的项目即可简单集成"&gt;学习下 CMake 如何依赖自己的项目即可简单集成&lt;/h2&gt;</description></item><item><title>作为ROS包集成</title><link>https://alrayqiu.github.io/autoaim/buildandrun/%E4%BD%9C%E4%B8%BAros%E5%8C%85%E9%9B%86%E6%88%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alrayqiu.github.io/autoaim/buildandrun/%E4%BD%9C%E4%B8%BAros%E5%8C%85%E9%9B%86%E6%88%90/</guid><description>&lt;h2 id="拉取最新的-ros-仓库"&gt;拉取最新的 ROS 仓库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;作为完整项目&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone https://github.com//alliance-algorithm/alliance_ros_auto_aim -b ros2-&lt;span style="color:#e06c75"&gt;$ROS_DISTRO&lt;/span&gt; --single-branch --recursive &lt;span style="color:#56b6c2"&gt;{&lt;/span&gt;/path/to/ws/pkgs&lt;span style="color:#56b6c2"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;作为子仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git submodule add https://github.com//alliance-algorithm/alliance_ros_auto_aim -b ros2-&lt;span style="color:#e06c75"&gt;$ROS_DISTRO&lt;/span&gt; &lt;span style="color:#56b6c2"&gt;{&lt;/span&gt;/path/to/ws/pkgs&lt;span style="color:#56b6c2"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git submodule update --init --single-branch --recursive
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="集成到其他-ros-包中"&gt;集成到其他 ros 包中&lt;/h2&gt;
&lt;p&gt;以&lt;code&gt;ROS2-humble&lt;/code&gt;为例子&lt;/p&gt;
&lt;p&gt;在需要使用&lt;code&gt;ROS包&lt;/code&gt;的&lt;code&gt;Package.xml&lt;/code&gt;中添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e06c75"&gt;&amp;lt;depend&amp;gt;&lt;/span&gt;alliance_ros_auto_aim&lt;span style="color:#e06c75"&gt;&amp;lt;/depend&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在需要使用&lt;code&gt;ROS包&lt;/code&gt;的&lt;code&gt;CMakeLists.txt&lt;/code&gt;中添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#abb2bf;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-CMake" data-lang="CMake"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e5c07b"&gt;ament_target_dependencies&lt;/span&gt;(&lt;span style="color:#98c379"&gt;&amp;lt;your&lt;/span&gt; &lt;span style="color:#98c379"&gt;project&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#98c379"&gt;alliance_ros_auto_aim&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>整车预测</title><link>https://alrayqiu.github.io/autoaim/%E8%87%AA%E7%9E%84%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%95%B4%E8%BD%A6%E9%A2%84%E6%B5%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alrayqiu.github.io/autoaim/%E8%87%AA%E7%9E%84%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%95%B4%E8%BD%A6%E9%A2%84%E6%B5%8B/</guid><description>&lt;h2 id="ekf"&gt;EKF&lt;/h2&gt;</description></item><item><title>识别器 + PNP求解器</title><link>https://alrayqiu.github.io/autoaim/%E8%87%AA%E7%9E%84%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E8%AF%86%E5%88%AB%E6%B1%82%E8%A7%A3%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alrayqiu.github.io/autoaim/%E8%87%AA%E7%9E%84%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E8%AF%86%E5%88%AB%E6%B1%82%E8%A7%A3%E5%99%A8/</guid><description>&lt;h2 id="识别器"&gt;识别器&lt;/h2&gt;
&lt;p&gt;识别器要求分析装甲板的颜色,分为颜色数字识别和二维角点信息获取&lt;/p&gt;
&lt;h3 id="颜色数字识别方案概览"&gt;颜色数字识别方案概览&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;方案名&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;th&gt;特征&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;yolo-pose&lt;/td&gt;
 &lt;td&gt;训练装甲板 6 点模型直接获取装甲板二维角点以及角点信息&lt;/td&gt;
 &lt;td&gt;角点精度较低,数字识别鲁棒性好，易于实现&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;yolo&lt;/td&gt;
 &lt;td&gt;通过 yolo 获取装甲板数字和 roi，之后通过 PCA 获取灯条角点&lt;/td&gt;
 &lt;td&gt;数字识别鲁棒性好，但是后续需要进一步操作&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;传统 + dnn&lt;/td&gt;
 &lt;td&gt;通过传统视觉识别灯条，识别装甲板，框选 ROI 之后通过 DNN 识别数字&lt;/td&gt;
 &lt;td&gt;误识别概率高，实现难度中等&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;传统 + 模式识别&lt;/td&gt;
 &lt;td&gt;传统视觉方案+模式识别&lt;/td&gt;
 &lt;td&gt;又累效果又不太好，，实现难度未知（队里没人写过）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="灯条角点识别方案概览"&gt;灯条角点识别方案概览&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;方案名&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;th&gt;特征&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;yolo-pose&lt;/td&gt;
 &lt;td&gt;yolopose 直接获取特征点&lt;/td&gt;
 &lt;td&gt;实现难度低，精度低&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;PCA&lt;/td&gt;
 &lt;td&gt;通过主成分分析方法，得到灯条的中轴，进而得到目标点&lt;/td&gt;
 &lt;td&gt;较难实现，效果好&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;最小二乘拟合&lt;/td&gt;
 &lt;td&gt;最小二乘法拟合灯条中轴&lt;/td&gt;
 &lt;td&gt;效果不太行，实现难度适中&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="yolo--pca-方案求角点"&gt;yolo + PCA 方案求角点&lt;/h2&gt;
&lt;p&gt;这是目前我认为最好的方案，模型我们选择深大开源模型，在我们平台上可以达到最高 120fps&lt;/p&gt;
&lt;h3 id="yolo-模型"&gt;yolo 模型&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;感谢深大开源地址 &lt;br&gt;
&lt;a href="https://bbs.robomaster.com/article/54091"&gt;https://bbs.robomaster.com/article/54091&lt;/a&gt;&lt;br&gt;
教程其 &lt;a href="https://github.com/broalantaps/RobotDetectionModel"&gt;&lt;code&gt;Git仓库&lt;/code&gt;&lt;/a&gt;有，这里偷个懒&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="pca-灯条识别"&gt;PCA 灯条识别&lt;/h3&gt;
&lt;p&gt;PCA 在这里的作用是找出二位点集分布方差最大的方向，也就是数据的主轴，我们在此把图像的亮度信息利用上&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;亮度信息提取与归一化&lt;br&gt;
这里可以选择&lt;code&gt;转灰度图&lt;/code&gt;或者使用&lt;code&gt; hsv 空间&lt;/code&gt;获取亮度，之后对处理后图像进行&lt;code&gt;最大最小归一化&lt;/code&gt;到 &lt;code&gt;0~1&lt;/code&gt;,并等距采样为&lt;code&gt;[0,...,255]&lt;/code&gt;的值&lt;/li&gt;
&lt;/ol&gt;
$$
x' = \left\lfloor \frac{x - x_{\min}}{x_{\max} - x_{\min}} \times 255 \right\rfloor
$$$$
x \in \{ I(p) \mid p \in \Omega \} \
were \ \Omega \ is \ ROI
$$&lt;ol start="2"&gt;
&lt;li&gt;构建 PCA 所使用的点集&lt;br&gt;
为了利用亮度信息，我们一个点添加在集合中出现其在图像中的亮度次&lt;/li&gt;
&lt;/ol&gt;
$$
M = \{ (p, x'(p)) \mid p \in \Omega \}
$$&lt;p&gt;其中 \((p,x'(p))\) 表示点 \(p\) 出现了 \(x'(p)\) 次&lt;/p&gt;</description></item></channel></rss>